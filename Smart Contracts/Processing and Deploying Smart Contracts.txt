Smart Contracts:
-> Smart contract is a centerpiece and main thrust of Ethereum blockchain.
-> It is the good, bad and the ugly of the blockchain technology.
-> It's a powerful feature.
-> Improper design and coding of a smart contract, resulted in significant failures such as DAO hack and Parity Wallet locker.
-> Linux Foundation's Hyperledger blockchain has a smart contract feature called Chaincode.
-> The Chaincode is written in go language, and executed in a docker environment.
-> Docker is a lightweight container technology for executing programs.
-> Bitcoin added a simple conditional transfer of value through an embedded script.
-> The founders of Ethereum developed smart contract keeping Nick Szabo's idea of a smart contract from over 20 years ago in mind.
->  A significant contribution of Ethereum is a working smart contract layer that supports any arbitrary code execution over the blockchain.
-> Smart contract allows for user-defined operations of arbitrary complexity.
-> This feature enhances the capability of Ethereum blockchain to be a powerful decentralized computing system.
-> Smart contract has some advantages including, a smart contract facilitates transaction for transfer of assets other than value or cryptocurrency.
-> Smart contract allows specification of rules for an operation on the blockchain.
-> It facilitates implementation of policies for transfer of assets in a decentralized network.
-> It also adds programmability and intelligence to the blockchain.
->The smart contract represents a business logic layer, with the actual logic coded in a special high level language.
-> A smart contract embeds function that can be invoked by messages that are like function calls.
-> These messages and the input parameters for a single message are specified in a transaction.
-> Let us compare Bitcoin transaction and a smart contract transaction.
-> As you can see in Bitcoin, all the transactions are about send value.
-> In the case of a blockchain that supports a smart contract, a transaction could embed a function implemented by a smart contract.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Processing Smart Contracts:
-> A smart contract can be created, on behalf of an externally owned account, by application programmatically from the command-line interface and by a script of commands from high level applications and user interface or UI.
-> It can also be created from inside a smart contract.
-> We need an address for the smart contract to deploy it and invoke its functions. 
-> The address is computed by hashing the account number of externally owned account UI and the nonce.

Web3deploy:
-> Web3deploy script is used by the web application to interface to the smart contract and the metadata hash.
-> A contract needs to be compiled. 
-> Various artifacts are generated including; the bytecode for deploying the contract, and the Application Binary Interface, ABI for the application that smart contract interact with a deployed bytecode.
-> Remix compiler script generates many artifacts in one shot. 
-> You can view these items generated by clicking on the Compile button, and then the Details button just below the compile button.Compile button.

 Here are some of the artifacts generated by the Remix smart contract compile process and their use:
Application Binary Interface(ABI):
-> Application Binary Interface, the interface schema for a transaction to invoke functions on the smart contract instance bytecode. 
Contract bytecode:
-> Contract bytecode, this is the bytecode that is executed for instantiating a smart contract on the EVM. 
-> Think of it like executing a constructor of a smart contract to create an object.
WebDeploy:
-> WebDeploy script, this as two items; json script to web application to invoke smart contract function, script for programmatically deploying a smart contract from a web application.
Gas Estimate:
-> Gas estimates, this provides a gas estimates for deploying the smart contract and for the function invocation. 
Function hashes:
-> Function hashes, first four byte of the function signatures to facilitate function invocation by a transaction. Instance bytecode, the bytecode of the smart contract instance.

Deploying Smart Contracts:
-> EVM provides execution environment for a smart contract bytecode. 
-> The smart contract requires an address for itself so that transaction can target it for invocation of its function. 
-> The contract address is generated by hashing the sender's account address and its nonce. 
-> A unique target account is reserved for smart contract creation and deployment. 
-> Target account zero. 
-> If a target's address is zero or null, it is meant for creating a new smart contract using its payload feed. 
-> The payload of a transaction contains the bytecode for the smart contract. 
-> This code is executed as a part of the transaction execution to instantiate the bytecode for the actual smart contract. 
-> Similar to how a constructor creates an object, the execution of a smart contract creation transaction results in the deployment of this smart contract code on the EVM. 
-> It is permanently stored in the EVM for future invocation. 
-> This transaction goes through all the regular verification and validation specified in the etherium blockchain protocol. 
-> Block creation, transaction confirmation by the full nodes deploys a the same contract on all the nodes. 
-> This provides consistent execution when the regular transaction with function messages are invoked on the smart contract.

There are many other approaches for deploying this smart contract. They can be deployed from 
-> Remix IDE
-> another smart contract
-> Command line interface
-> Another high-level language application or Web application.

Deployment using only the Remix IDE:
->  You enter the smart contract code in the Remix IDE and compile.
-> Remix generates several artifacts as discussed earlier and as shown in the picture. 
-> For the ease of deployment, Remix provides us with the Web3 deployment script which contains a bytecode. 
-> Application Binary Interface, ABI, and account detail. To deploy the smart contract, we could just execute the script. 
-> Once the deployment is done, the address is generated by hashing creator's account number and nonce. 
-> To interact with the smart contract, we'll use the smart contract address, ABI definition, and the function hashes.

TO DO:
-> Ethereum, tokens & smart contracts (https://medium.com/@k3no/ethereum-tokens-smart-contracts-80f639f5c46b)
-> Decoding the enigma of Bitcoin Mining (https://medium.com/all-things-ledger/decoding-the-enigma-of-bitcoin-mining-f8b2697bc4e2)

