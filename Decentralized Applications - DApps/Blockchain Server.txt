Blockchain Server:
-> DApp gives access to people, applications and systems, not necessarily known to each other to transact peer to peer.
-> DApp is an end to end application on a blockchain. 
-> In its simplest form, a DApp has a client interface as a front-end, and a back-end that includes a blockchain and a smart contract. 
-> Consider, for example, a simple wallet application client, and the Bitcoin blockchain decentralized infrastructure.
-> This is similar to the architecture of a web browser and a web server, but with one significant difference. 
-> The blockchain enables a decentralized infrastructure. 
-> The client or the front-end can be a web app, HTML and Javascript framework. 
-> A command line interface, CLI, a desktop application, a mobile application, or even an IoT, Internet of Things. 
-> Understand web front-end is outside the blockchain protocol, and it can only link into the blockchain smart contract, using artifacts generated by the smart contract compile process.
-> Additionally, a DApp can be created with a non-blockchain back-end.
-> Interplanetary file system, IPFS, is an example of such an architecture.

Decentralized Apps Stack :

Verticals: End User Application
Application Framework: Smart Contracts
Ethereum Blockchain and Ethereum Virtual Machine(EVM)
Peer-to-Peer Network and Operating System
Hardware

-> That network ID for the Ethereum main network including metropolis, is 1. Ropsten, the public cross-client Ethereum testnet is 3, Rinkeby's network ID is 4. 
-> There is even a Musicoin, the music blockchain, with network ID 7762959.

-> We use geth command to install a node by creating a new account number, an externally owned account, EOA. 
-> We then initialize the node using a custom genesis block that has a specification, the first block of the chain. 
-> Finally, we specify the network ID and the port to buy into for the node that interact with the blockchain. 
-> Ethereum node - enode address for this genesis node or the bootnode is created.
-> This enode address is used by other nodes to connect to this bootnode, and establish a peer-to-peer network on which the blockchain operates. 


Dapp Defined:
-> A Dapp, or decentralized application, solves a problem that requires blockchain services and blockchain infrastructure for realizing its purpose. 
-> Typically, a Dapp has a web front-end, and a blockchain back end, and the code connecting the two. 
-> In such an architecture, the front-end of a Dapp channels any external stimulus from the users to the blockchain infrastructure and returns any response back to them. 
-> It initiates transactions to invoke functions on the smart contract. 
-> That in turn, records the transactions and state transition and receipts on the blockchain. 
-> The front-end of a Dapp can be as simple as a command line interface.
-> It can also be a sophisticated web app or an easy to use mobile app. 
-> The front-end development may involve development of a web client with the HTML, JavaScript, and CSS's, and other web assets, or a web app framework, such as Express.
->  Here, the blockchain server is the E-node on the underlying infrastructure. 
-> And the front-end is a web client with embedded web3.js script, communicating using JSON over RPC pipeline. 
-> If you are programmatically assembling the Dapp without the help of any development environment you copy the web3 deploy script into your app, say an HTML JavaScript file as a script. 
-> Deploy the smart contract using the functions in the script. 
-> And invoke the smart contract function using the functions in the script, and the ABI, and the smart contract address.

Ethereum APIs:
-> 
