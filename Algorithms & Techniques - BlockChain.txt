Public-Key Cryptography:
---------------------------------------------
-> Two techniques are predominantly used for securing the chain and for efficient validation and verification. 
-> Hashing and asymmetric key encryption. 
-> These techniques depend on several complex proven algorithms.

Symmetric Key Encyption:
->  The same key is used for encryption and decryption, so it is called symmetric key. 
-> Example, Ceasar encryption is the simplest one with alphabets of a message are shifted by a fixed number, and this number is called the Key.
-> it is easy to derive the secret key from the encrypted data.
-> Not used in BlockChain
-> Public-key cryptography addresses these issues. Instead of a single secret key, it employs two different keys that take care of both the issues of symmetric key encryption.

RSA(Rivest Shamir Adleman) Algorithm:
-> A popular implementation of public key, private key is the Rivest Shamir Adleman (RSA) algorithm. 
-> Common application of RSA is the passwordless user authentication, for example for accessing a virtual machine on Amazon cloud.
-> Though RSA is very commonly used in many applications, block chains need a more efficient and stronger algorithm.
->  Efficiency is a critical requirement since public key pair is frequently used in many different operations in block chain protocol. 
-> Elliptic Curve Cryptography, ECC family of algorithms is used in the bitcoin as well as an Ethereum block chain for generating the key pair.

Elliptic Curve Cryptography:
->  ECC is stronger than RSA for a given number of bits.
->  256 bit ECC key pair is equal in strength to about 3072 bits of RSA key pair.
-> Both bitcoin and Ethereum use ECC based algorithms for their encryption needs. 

HASHING:
->  A hash function or hashing transforms and maps an arbitrary length of input data value to a unique fixed length value. 
-> Input data can be a document, tree data, or a block data. 
-> Even a slight difference in the input data would produce a totally different hash output value.
-> The algorithm chosen for the hash function should be a one-way function and it should be collision free, or exhibit extremely low probability of collision. 
-> The first requirement is to make certain that no one can derive the original items hashed from the hash value.
->  The second requirement is to make sure that the hash value uniquely represents the original items hashed. 
-> There should be extremely low probability that two different datasets map onto the same hash value.
->  These requirements are achieved by choosing a strong algorithm such as secure hash, and by using appropriately large number of bits in the hash value. Most common hash size now is 256 bits and the common functions are SHA-3, SHA-256 and Keccak.

TRANSACTION INTEGRITY:
To manage the integrity of a transaction we need - 
-> a secure unique account address.
-> authorization of the transaction by the sender through digital signing.
-> verification that the content of that transaction is not modified.

 ->We use a combination of hashing and public key cryptography, to solve these problems.

Address Of the Accounts:
->  Addresses of accounts are generated using public key, private key pair.
-> 256-bit random number is generated, and designated as the private key. 
-> Kept secure and locked using a passphrase. 
-> ECC algorithm is applied to the private key, to get a unique public key. 
-> This is the private public key pair. 
-> Then a hashing function is applied to the public key to obtain account address. 
-> The address is shorter in size, only 20 bytes or 160 bits.

Transaction integrity:
-> A transaction for transferring assets will have to be authorized, it has to be non-repudiable, and unmodifiable.
-> We first examine digital signing process, and then apply it to the transaction.
->  Data is hashed and encrypted. 
-> This is the digital signature. 
-> The receiver gets the original data, and the secure hash digitally signed.
->  Receiver can recompute the hash of the original data received, and compare it with the received hash to verify the integrity of the document.
->  Now, consider the transaction to be that data. 
-> Find the hash of the data fields of the transaction. 
-> Encrypt that hash using the private key of the participant originating the transaction. 
-> Thus, digitally signing the transaction to authorize and making the transaction non-repudiable. 
-> This hash is added to the transaction. 
-> It can be verified by others decrypting it using the public key of the sender of the transaction, and recomputing the hash of the transaction. 
-> Then, compare the computed hash, and the hash received at the digital signature. 
-> If that is a match, transaction is accepted or otherwise rejected.

Securing Blockchain:
Main components of the Ethereum block are,
-> Block Header
-> Transaction Hash
-> Transaction Root
-> State Hash
-> State Root

Integrity of the Block:
->  Integrity of the block is managed by assuring that the block header contents are not tampered with, the transactions are not tempered with, state transitions are efficiently computed, hashed, and verified.
->  In Ethereum, the block hash is the block of all the elements in the block header, including the transaction root and state root hashes. 
-> It is computed by applying a variant of SHA-3 algorithm called Keccak and all the items of the block header.
-> A typical block has about 200 transactions in bitcoin and about 100 transaction in Ethereum.
->  We need an efficient way to detect tampering and validate the transaction efficiently. 
-> Hashes of transaction in a block are processed in a tree structure called Mekle tree hash.
-> Merkle tree hash is also used for computing the state root hash, since only the hash of the chained states from block to block have to be re-computed.
-> It is also used for receipt hash root.
->  Remember the advantage over flat versus tree representation. 
-> If any transaction is to be verified, only one path to the tree has to be checked. 
-> You don't have to go through the entire set of transactions.
-> Smart contract execution in Ethereum results in state transitions.
-> Every state change requires state root hash re-computation. 
-> Instead of computing hash for the entire set of states, only the affected path in the Merkle tree needs to be re-computed.

Block Hash:
-> Block hash in Ethereum is computed by first computing the state root hash, transaction root hash and then receipt root hash.
-> These roots and all the other items in the header are hash together with the variable nodes to solve the proof of work puzzle.
->  Block hash serves two important purposes; verification of the integrity of the block and the transactions, formation of the chain link by embedding the previous block hash in the current block header.
-> If any participant node tampers with the block, it's hash value changes resulting in the mismatch of the hash values and rendering the local chain of the node in an invalid state.
->  Any future blocks initiated by the node would be rejected by other miners due to hash mismatch. This enforces the immutability of the chain.